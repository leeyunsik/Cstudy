// 20200221.cpp : 응용 프로그램에 대한 진입점을 정의합니다.
//

#include "stdafx.h"
#include "20200221.h"
#include<list>

using namespace std;


#define MAX_LOADSTRING 100

typedef struct _tagRectangle
{
	float l, t, r, b;
}RECTANGLE, *PRECTANGLE;

// 전역 변수:
HINSTANCE hInst;                                // 현재 인스턴스입니다.
WCHAR szTitle[MAX_LOADSTRING];                  // 제목 표시줄 텍스트입니다.
WCHAR szWindowClass[MAX_LOADSTRING];            // 기본 창 클래스 이름입니다.
HWND g_hWnd; //////////////////////
HDC g_hDC; //////////////////////////////////
bool g_bLoop = true; /////////////////////////////
RECT g_tPlaterRC; ////////////////////////////
RECTANGLE g_tPlayerRC = { 100,100,200,200 };//////////////

//플레이어 총알 
list<RECTANGLE>g_PlayerBulletList;


//시간을 구하기 위한 변수들
LARGE_INTEGER g_tSecond;
LARGE_INTEGER g_tTime;
float g_fDeltaTime;

// 이 코드 모듈에 포함된 함수의 선언을 전달합니다:
ATOM                MyRegisterClass(HINSTANCE hInstance);
BOOL                InitInstance(HINSTANCE, int);
LRESULT CALLBACK    WndProc(HWND, UINT, WPARAM, LPARAM);
INT_PTR CALLBACK    About(HWND, UINT, WPARAM, LPARAM);

void Run(); /////////////////////////////

int APIENTRY wWinMain(_In_ HINSTANCE hInstance,
                     _In_opt_ HINSTANCE hPrevInstance,
                     _In_ LPWSTR    lpCmdLine,
                     _In_ int       nCmdShow)
{
    UNREFERENCED_PARAMETER(hPrevInstance);
    UNREFERENCED_PARAMETER(lpCmdLine);

    // TODO: 여기에 코드를 입력합니다.

    // 전역 문자열을 초기화합니다.
    LoadStringW(hInstance, IDS_APP_TITLE, szTitle, MAX_LOADSTRING);
    LoadStringW(hInstance, IDC_MY20200221, szWindowClass, MAX_LOADSTRING);
    MyRegisterClass(hInstance);

    // 응용 프로그램 초기화를 수행합니다:
    if (!InitInstance (hInstance, nCmdShow))
    {
        return FALSE;
    }


	//화면용 DC 생성
	g_hDC = GetDC(g_hWnd);
    HACCEL hAccelTable = LoadAccelerators(hInstance, MAKEINTRESOURCE(IDC_MY20200221));

    MSG msg;

	QueryPerformanceFrequency(&g_tSecond); //초당 값
	QueryPerformanceCounter(&g_tTime); //이전 프레임의 시간


    // 기본 메시지 루프입니다:
	
    while (g_bLoop)  /////////////////////////////
    {
		//PeekMessage는 메세지가 메세지큐에 없어도 바로 빠져나온다.
		//메세지가 있을경우 true, 없을경우 false가 된다
		//메세지가 없는 시간이 윈도우의 데드타임이다.
        if (PeekMessage(&msg,nullptr,0,0,PM_REMOVE))
        {
            TranslateMessage(&msg);
            DispatchMessage(&msg);
        }
		//윈도우 데드타임 일경우 여기에 게임구현
		else
		{
			//static int iCount;
			//++iCount;

			//if (iCount == 3000)
			//{
				//iCount = 0;
				Run();
			//}
		}
    } /////////////////////////////

	ReleaseDC(g_hWnd, g_hDC);

    return (int) msg.wParam;
}



//
//  함수: MyRegisterClass()
//
//  용도: 창 클래스를 등록합니다.
//
ATOM MyRegisterClass(HINSTANCE hInstance)
{
    WNDCLASSEXW wcex;

    wcex.cbSize = sizeof(WNDCLASSEX);

    wcex.style          = CS_HREDRAW | CS_VREDRAW;
    wcex.lpfnWndProc    = WndProc;
    wcex.cbClsExtra     = 0;
    wcex.cbWndExtra     = 0;
    wcex.hInstance      = hInstance;
    wcex.hIcon          = LoadIcon(hInstance, MAKEINTRESOURCE(IDI_MY20200221));
    wcex.hCursor        = LoadCursor(nullptr, IDC_ARROW);
    wcex.hbrBackground  = (HBRUSH)(COLOR_WINDOW+1);
	wcex.lpszMenuName = NULL;//MAKEINTRESOURCEW(IDC_MY20200221);
    wcex.lpszClassName  = szWindowClass;
    wcex.hIconSm        = LoadIcon(wcex.hInstance, MAKEINTRESOURCE(IDI_SMALL));

    return RegisterClassExW(&wcex);
}

//
//   함수: InitInstance(HINSTANCE, int)
//
//   용도: 인스턴스 핸들을 저장하고 주 창을 만듭니다.
//
//   주석:
//
//        이 함수를 통해 인스턴스 핸들을 전역 변수에 저장하고
//        주 프로그램 창을 만든 다음 표시합니다.
//
BOOL InitInstance(HINSTANCE hInstance, int nCmdShow)
{
   hInst = hInstance; // 인스턴스 핸들을 전역 변수에 저장합니다.

   HWND hWnd = CreateWindowW(szWindowClass, szTitle, WS_OVERLAPPEDWINDOW,
      CW_USEDEFAULT, 0, CW_USEDEFAULT, 0, nullptr, nullptr, hInstance, nullptr);

   if (!hWnd)
   {
      return FALSE;
   }

   g_hWnd = hWnd;

   //실제윈도우 타이틀바나 메뉴를 포함한 윈도우의 크기를 구해준다.
   RECT rc = { 0,0,800,600 };
   AdjustWindowRect(&rc, WS_OVERLAPPEDWINDOW, FALSE);

   //위에서 구해준 크기로 윈도우 클라이언트 영역의 크기를 
   //원하는 크기로 맞춰줘야한다.
   SetWindowPos(hWnd,HWND_TOPMOST,100,100,rc.right-rc.left,rc.bottom-rc.top,SWP_NOMOVE|SWP_NOZORDER);

   ShowWindow(hWnd, nCmdShow);
   UpdateWindow(hWnd);

   return TRUE;
}

//
//  함수: WndProc(HWND, UINT, WPARAM, LPARAM)
//
//  용도: 주 창의 메시지를 처리합니다.
//
//  WM_COMMAND  - 응용 프로그램 메뉴를 처리합니다.
//  WM_PAINT    - 주 창을 그립니다.
//  WM_DESTROY  - 종료 메시지를 게시하고 반환합니다.
//
//
LRESULT CALLBACK WndProc(HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam)
{
    switch (message)
    {
    case WM_COMMAND:
        {
            int wmId = LOWORD(wParam);
            // 메뉴 선택을 구문 분석합니다:
            switch (wmId)
            {
            case IDM_ABOUT:
                DialogBox(hInst, MAKEINTRESOURCE(IDD_ABOUTBOX), hWnd, About);
                break;
            case IDM_EXIT:
                DestroyWindow(hWnd);
                break;
            default:
                return DefWindowProc(hWnd, message, wParam, lParam);
            }
        }
        break;
    case WM_PAINT:
        {
            PAINTSTRUCT ps;
            HDC hdc = BeginPaint(hWnd, &ps);
            // TODO: 여기에 hdc를 사용하는 그리기 코드를 추가합니다...
            EndPaint(hWnd, &ps);
        }
        break;
		//윈도우를 종료시킬때 들어오는 메세지이다.
    case WM_DESTROY:
		g_bLoop = false; /////////////////////////////
        PostQuitMessage(0);
        break;
    default:
        return DefWindowProc(hWnd, message, wParam, lParam);
    }
    return 0;
}

// 정보 대화 상자의 메시지 처리기입니다.
INT_PTR CALLBACK About(HWND hDlg, UINT message, WPARAM wParam, LPARAM lParam)
{
    UNREFERENCED_PARAMETER(lParam);
    switch (message)
    {
    case WM_INITDIALOG:
        return (INT_PTR)TRUE;

    case WM_COMMAND:
        if (LOWORD(wParam) == IDOK || LOWORD(wParam) == IDCANCEL)
        {
            EndDialog(hDlg, LOWORD(wParam));
            return (INT_PTR)TRUE;
        }
        break;
    }
    return (INT_PTR)FALSE;
}

void Run()
{
	//DeltaTime 을 구해준다 . 프레임과 프레임 사이의 시간
	LARGE_INTEGER tTime;
	QueryPerformanceCounter(&tTime);

	g_fDeltaTime = (tTime.QuadPart - g_tTime.QuadPart) /
		(float)g_tSecond.QuadPart;   // (현재프레임-이전프레임)/1초 프레임
	g_tTime = tTime; //갱신

	static float fTimeScale = 1.f;
	if (GetAsyncKeyState(VK_F1) & 0x8000)  // 이속 감소
	{
		fTimeScale -= g_fDeltaTime;

		if (fTimeScale < 0.f)
			fTimeScale = 0.f;
	}
	if (GetAsyncKeyState(VK_F2) & 0x8000) //이속 증가
	{
		fTimeScale += g_fDeltaTime;
		if (fTimeScale > 1.f)
			fTimeScale = 1.f;
	}

	//플레이어 초당 이동속도 :600
	float fSpeed = (600+600*0.05f) * g_fDeltaTime * fTimeScale; //이속 5퍼 증가


	if (GetAsyncKeyState('D') & 0x8000)
	{
		//struct 쓸떄
		g_tPlayerRC.l += fSpeed;
		g_tPlayerRC.r += fSpeed;

		//RECT 쓸떄는 g_tPlayerRC.left += 1; 이렇게 
	}

	if (GetAsyncKeyState('A') & 0x8000)
	{
		g_tPlayerRC.l -= fSpeed;
		g_tPlayerRC.r -= fSpeed;
	}

	if (GetAsyncKeyState('S') & 0x8000)
	{
		g_tPlayerRC.t += fSpeed;
		g_tPlayerRC.b += fSpeed;
	}

	if (GetAsyncKeyState('W') & 0x8000)
	{
		g_tPlayerRC.t -= fSpeed;
		g_tPlayerRC.b -= fSpeed;
	}
	if (GetAsyncKeyState(VK_SPACE) & 0x8000)
	{
		RECTANGLE rcBullet;

		rcBullet.l = g_tPlayerRC.r;
		rcBullet.r = g_tPlayerRC.r+50.f;
		rcBullet.t = (g_tPlayerRC.t+g_tPlayerRC.b)/ 2.f - 25.f;
		rcBullet.b = (g_tPlayerRC.t + g_tPlayerRC.b) / 2.f+25.f;
		g_PlayerBulletList.push_back(rcBullet);
	}



	RECT rcWindow;
	//GetWindowRect(g_hWnd, &rcWindow); //메뉴나 타이틀바까지 계산
	GetClientRect(g_hWnd, &rcWindow); //클라이언트 영역만 계산
	SetRect(&rcWindow, 0, 0, 800, 600);
	
	if (g_tPlayerRC.l < 0)
	{
		g_tPlayerRC.l = 0;
		g_tPlayerRC.r = 100;
	}
	
	/*
	else if (g_tPlayerRC.right>800)
	{
		g_tPlayerRC.right = 800;
		g_tPlayerRC.left = 700;
	}
	*/
	else if (g_tPlayerRC.r>rcWindow.right)
	{
		g_tPlayerRC.r = rcWindow.right;
		g_tPlayerRC.l = rcWindow.right-100;
	} // 이런식으로도 가능


	if (g_tPlayerRC.t < 0)
	{
		g_tPlayerRC.t = 0;
		g_tPlayerRC.b = 100;
	}
	else if (g_tPlayerRC.b > 600)
	{
		g_tPlayerRC.b = 600;
		g_tPlayerRC.t = 500;
	}

	//플레이어 총알이동
	list<RECTANGLE>::iterator iter;
	list<RECTANGLE>::iterator iterEnd = g_PlayerBulletList.end();

	fSpeed = 600.f * g_fDeltaTime *  fTimeScale;

	
	for (iter = g_PlayerBulletList.begin(); iter != iterEnd;)
	{
		(*iter).l += fSpeed;
		(*iter).r += fSpeed;

		if (800 <= (*iter).l)
		{
			iter = g_PlayerBulletList.erase(iter);  //그,다음 이터레이터를 가져오기떄문 원래 지워지는데 지워지는
			//부분이 없어서 잔상발생
			iterEnd = g_PlayerBulletList.end();
		}
		else
			++iter;
	} //6강  22:42
	
	

	//출력
	Rectangle(g_hDC, 0, 0, 800, 600);


	Rectangle(g_hDC, g_tPlayerRC.l, g_tPlayerRC.t, g_tPlayerRC.r, g_tPlayerRC.b);


	//총쏘기
	

	for (iter = g_PlayerBulletList.begin() ; iter != iterEnd; ++iter)
	{
		Rectangle(g_hDC, (*iter).l, (*iter).t, (*iter).r, (*iter).b);
	}
}
